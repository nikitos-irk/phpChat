Write a very simple ‘chat’ application backend in PHP.

A user should be able to send a simple text
message to another user and a user should be able to get the messages sent to him and the
author users of those messages.

The users and messages should be stored in a simple SQLite
database. All communication between the client and server should happen over a simple JSON
based protocol over HTTP (which may be periodically refreshed to poll for new messages).

A GUI, user registration and user login are not needed but the users should be identified by some token
or ID in the HTTP messages and the database. You have the freedom to use any framework and
libraries; keep in mind that we love custom-build.

---------------------------

sudo apt install php-sqlite3

---------------------------
get messages:
	GET url/<id>
	RESPONSES:
		{
			"messages": [{"message_id": <message_id>, "msg": <msg>, "user_name": <sender name>}, ...],
			"error_message": <error_message>
		}

sent message:
	POST url/<id>
	SENT:
		{"id": <id>, "to": <name>, "msg": <msg>}
	RESPONSES:
		{"error_message": <error_message>}

login user:
	POST <url>/user
		SENT:
			{"name": <name>}
		RESPONSE:
			{"id": <id>, "error_message": <error_message>}

--------------------------

DROP TABLE IF EXISTS users; DROP TABLE IF EXISTS messages; DROP TABLE IF EXISTS message_recipients;

CREATE TABLE IF NOT EXISTS users (
	user_id integer PRIMARY KEY,
	user_name VARCHAR(256)
);

CREATE TABLE messages (
	message_id INTEGER PRIMARY KEY,
	time_stamp DATETIME, 
	message VARCHAR(4000),
	read_status BOOLEAN,
	sender_id integer NOT NULL,
		FOREIGN KEY (sender_id) REFERENCES users(user_id)
);
 
CREATE TABLE message_recipients (
	message_id integer NOT NULL,
	recipient_id integer NOT NULL,
		FOREIGN KEY (message_id) REFERENCES messages(message_id),
		FOREIGN KEY (recipient_id) REFERENCES users(user_id)
);


insert into users (user_name) values ("nk");
insert into users (user_name) values ("rk");
insert into messages (time_stamp, message, read_status, sender_id) values (datetime('now'), "hello from nk", 0, 1);
insert into messages (time_stamp, message, read_status, sender_id) values (datetime('now'), "hello from rk", 0, 2);
insert into message_recipients (message_id, recipient_id) values (1, 2);
insert into message_recipients (message_id, recipient_id) values (2, 1);


SELECT messages.message_id, messages.message, users.user_name FROM messages
LEFT JOIN message_recipients ON message_recipients.message_id = messages.message_id
LEFT JOIN users ON users.user_id = messages.sender_id
WHERE message_recipients.recipient_id=2 AND messages.read_status=0
ORDER BY date(messages.time_stamp);

UPDATE messages set read_status=0;// WHERE message_id=2;